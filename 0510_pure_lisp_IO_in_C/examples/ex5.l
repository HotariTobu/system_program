((lambda(list2 list3 diff)
    (diff (quote x) 
          (quote (div (minus x (mult y z)) (plus x y) ) ))
 )
 (quote(lambda(x y)(cons x(cons y nil))))
 (quote(lambda(x y z)(cons x(list2 y z))))
 (quote(lambda(x e)
     (cond((eq x e) (quote 1))
          ((atom e) (quote 0))
          ((eq (car e) (quote plus)) 
           (list3 (quote plus) 
                  (diff x (car(cdr e)))
                  (diff x (car(cdr(cdr e)))) ) ) 
          ((eq (car e) (quote minus)) 
           (list3 (quote minus) 
                  (diff x (car(cdr e)))
                  (diff x (car(cdr(cdr e)))) ) )
          ((eq (car e) (quote mult)) 
           (list3
             (quote plus) 
             (list3 (quote mult) (diff x (car(cdr e))) (car(cdr(cdr e))) )
             (list3 (quote mult) (car(cdr e)) (diff x (car(cdr(cdr e)))) )
           ))
          ((eq (car e) (quote div)) 
           (list3
             (quote plus) 
             (list3 (quote div) (diff x (car(cdr e))) (car(cdr(cdr e))) )
             (list3 (quote mult) 
                    (list2 (quote neg) 
                           (list3 (quote div)
                                  (car(cdr e)) 
                                  (list3 (quote mult) (car(cdr(cdr e)))
                                                      (car(cdr(cdr e))) ) ) )
                    (diff x (car(cdr(cdr e)))) )
           )) ))))
